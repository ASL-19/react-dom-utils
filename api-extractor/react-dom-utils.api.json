{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.36.4",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "kind": "Package",
  "canonicalReference": "@asl-19/react-dom-utils!",
  "docComment": "/**\n * Shared ReactDOM utility functions and types for ASL19 projects.\n *\n * @packageDocumentation\n */\n",
  "name": "@asl-19/react-dom-utils",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@asl-19/react-dom-utils!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "@asl-19/react-dom-utils!FormState:type",
          "docComment": "/**\n * {@link useFormStateAndFocusManagement} state\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type FormState = "
            },
            {
              "kind": "Content",
              "text": "{\n    errorMessages: "
            },
            {
              "kind": "Reference",
              "text": "Array",
              "canonicalReference": "!Array:interface"
            },
            {
              "kind": "Content",
              "text": "<string>;\n    type: \"hasErrorMessages\";\n} | {\n    type: \"isNotSubmitted\";\n} | {\n    type: \"isSubmitted\";\n} | {\n    type: \"isSubmitting\";\n}"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/FormState.ts",
          "releaseTag": "Public",
          "name": "FormState",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 4
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@asl-19/react-dom-utils!StylableFC:type",
          "docComment": "/**\n * React FunctionComponent that takes an optional className prop.\n *\n * @remarks\n *\n * The className prop is used for styling the component instanceâ€™s top-level element (which should have `className={className}`) from the outside.\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "type StylableFC<P = "
            },
            {
              "kind": "Content",
              "text": "{}"
            },
            {
              "kind": "Content",
              "text": "> = "
            },
            {
              "kind": "Reference",
              "text": "FunctionComponent",
              "canonicalReference": "@types/react!React.FunctionComponent:interface"
            },
            {
              "kind": "Content",
              "text": "<P & {\n    className?: string;\n}>"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/StylableFC.ts",
          "releaseTag": "Public",
          "name": "StylableFC",
          "typeParameters": [
            {
              "typeParameterName": "P",
              "constraintTokenRange": {
                "startIndex": 0,
                "endIndex": 0
              },
              "defaultTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "typeTokenRange": {
            "startIndex": 3,
            "endIndex": 5
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/react-dom-utils!useAddHydratedClassName:var",
          "docComment": "/**\n * Add \"hydrated\" className to <html> element once site has rendered on client.\n *\n * We use this in Playwright tests to avoid interacting with the page before event handlers are ready.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useAddHydratedClassName: "
            },
            {
              "kind": "Content",
              "text": "() => void"
            }
          ],
          "fileUrlPath": "src/useAddHydratedClassName.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "useAddHydratedClassName",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/react-dom-utils!useDynamicFocusOutlines:var",
          "docComment": "/**\n * Hide focus outlines when a mousedown event fires; show focus outlines when a keydown event fires.\n *\n * This preserves focus outlines when a user is navigating the site with their keyboard while preventing distracting focus outlines from appearing when the user is navigating via mouse/touch.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useDynamicFocusOutlines: "
            },
            {
              "kind": "Content",
              "text": "() => void"
            }
          ],
          "fileUrlPath": "src/useDynamicFocusOutlines.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "useDynamicFocusOutlines",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/react-dom-utils!useFocusElementAfterRender:var",
          "docComment": "/**\n * Focus a provided element after the current render.\n *\n * This is necessary to focus an element that will only become focusable after the current render is complete (e.g. if the element comes into view as a result of a setState an event callback).\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useFocusElementAfterRender: "
            },
            {
              "kind": "Content",
              "text": "() => import(\"react\")."
            },
            {
              "kind": "Reference",
              "text": "Dispatch",
              "canonicalReference": "@types/react!React.Dispatch:type"
            },
            {
              "kind": "Content",
              "text": "<import(\"react\")."
            },
            {
              "kind": "Reference",
              "text": "SetStateAction",
              "canonicalReference": "@types/react!React.SetStateAction:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": " | null>>"
            }
          ],
          "fileUrlPath": "src/useFocusElementAfterRender.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "useFocusElementAfterRender",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/react-dom-utils!useFormStateAndFocusManagement:var",
          "docComment": "/**\n * Hook for storing {@link FormState} and manipulating focus management based on state.\n *\n * @remarks\n *\n * The returned ref objects should be attached to the appropriate elements.\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useFormStateAndFocusManagement: "
            },
            {
              "kind": "Content",
              "text": "({ disableFocusManagement, }?: {\n    disableFocusManagement?: boolean | undefined;\n}) => {\n    confirmationMessageElementRef: import(\"react\")."
            },
            {
              "kind": "Reference",
              "text": "RefObject",
              "canonicalReference": "@types/react!React.RefObject:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLParagraphElement",
              "canonicalReference": "!HTMLParagraphElement:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    errorMessagesListRef: import(\"react\")."
            },
            {
              "kind": "Reference",
              "text": "RefObject",
              "canonicalReference": "@types/react!React.RefObject:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLUListElement",
              "canonicalReference": "!HTMLUListElement:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n    formState: "
            },
            {
              "kind": "Reference",
              "text": "FormState",
              "canonicalReference": "@asl-19/react-dom-utils!FormState:type"
            },
            {
              "kind": "Content",
              "text": ";\n    setFormState: import(\"react\")."
            },
            {
              "kind": "Reference",
              "text": "Dispatch",
              "canonicalReference": "@types/react!React.Dispatch:type"
            },
            {
              "kind": "Content",
              "text": "<import(\"react\")."
            },
            {
              "kind": "Reference",
              "text": "SetStateAction",
              "canonicalReference": "@types/react!React.SetStateAction:type"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "FormState",
              "canonicalReference": "@asl-19/react-dom-utils!FormState:type"
            },
            {
              "kind": "Content",
              "text": ">>;\n}"
            }
          ],
          "fileUrlPath": "src/useFormStateAndFocusManagement.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "useFormStateAndFocusManagement",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 18
          }
        },
        {
          "kind": "Variable",
          "canonicalReference": "@asl-19/react-dom-utils!useOnClickOutside:var",
          "docComment": "/**\n * Detect clicks outside of specific component This code is a slightly modified version of this: https://usehooks.com/useOnClickOutside/\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "useOnClickOutside: "
            },
            {
              "kind": "Content",
              "text": "({ handler, isEnabled, ref, }: {\n    handler: "
            },
            {
              "kind": "Reference",
              "text": "CallableFunction",
              "canonicalReference": "!CallableFunction:interface"
            },
            {
              "kind": "Content",
              "text": ";\n    isEnabled: boolean;\n    ref: "
            },
            {
              "kind": "Reference",
              "text": "RefObject",
              "canonicalReference": "@types/react!React.RefObject:interface"
            },
            {
              "kind": "Content",
              "text": "<"
            },
            {
              "kind": "Reference",
              "text": "HTMLElement",
              "canonicalReference": "!HTMLElement:interface"
            },
            {
              "kind": "Content",
              "text": ">;\n}) => void"
            }
          ],
          "fileUrlPath": "src/useOnClickOutside.ts",
          "isReadonly": true,
          "releaseTag": "Public",
          "name": "useOnClickOutside",
          "variableTypeTokenRange": {
            "startIndex": 1,
            "endIndex": 8
          }
        }
      ]
    }
  ]
}
